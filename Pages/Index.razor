@using System.IO
@page "/";
@layout NoMenuLayout
@using Newtonsoft.Json
@inject IJSRuntime JSRuntime

<table class="table">
    <tbody>
        <div class="container-fluid">
            @if (uniqueLanguages.Count != 0)
            {
                <select @onchange="LanguageSelected" value="@selectedLanguage">
                    <option value=" "> </option>
                    @foreach (var language in uniqueLanguages)
                    {
                        <option value="@language">@language</option>
                    }
                </select>
            }

            @if (uniqueKeywords.Count != 0)
            {
                <select @onchange="KeywordSelected" value="@selectedKeyword">
                    <option value=" "> </option>
                    @foreach (var Keyword in uniqueKeywords)
                    {
                        <option value="@Keyword">@Keyword</option>
                    }
                </select>
            }

            @if (uniqueColor.Count != 0)
            {
                <select @onchange="ColorSelected" value="@selectedColor">
                    <option value=" "> </option>
                    @foreach (var Color in uniqueColor)
                    {
                        <option value="@Color">@Color</option>
                    }
                </select>
            }

            @if (uniqueState.Count != 0)
            {
                <select @onchange="StateSelected" value="@selectedState">
                    <option value=" "> </option>
                    @foreach (var State in uniqueState)
                    {
                        <option value="@State">@State</option>
                    }
                </select>
            }

            @if (uniqueType.Count != 0)
            {
                <select @onchange="TypeSelected" value="@selectedType">
                    <option value=" "> </option>
                    @foreach (var Type in uniqueType)
                    {
                        <option value="@Type">@Type</option>
                    }
                </select>
            }

            <button class="btn btn-reset" @onclick="ResetAll">Reset all</button>


            <button class="btn right-button" @onclick="UpdateDB">Refresh</button>

            <div class="row">
                @foreach (var project in Projects)
                {
                    @*déserialize le JSON et le converti en objet de classe "project"*@
                    <div class="col-md-4" style="margin: 10px 0">

                        @*Bouton si caché, onclick -> appel methode*@
                        <button class="btn btn-custom"
                            style="color:black; background-color: @project.Color; text-decoration:none; width:100%; height:64px; border: 1px solid black"
                            @onclick="(() => ToggleDetails(project.Id - 1))">
                            @project.Titre
                        </button>

                        @*div si affiché*@
                        <div class="card">
                            @if (project.DetailsVisible)
                            {
                                <div class="card-body">
                                    @*détails du projet*@
                                    <p>Description: @project.Description</p>
                                    <p>Responsable: @project.Responsable</p>
                                    <p>Date: @project.Date</p>
                                    <p>Language: @project.Language</p>
                                    <p>Keywords: @project.Keywords</p>
                                    <p>Color: @project.Color</p>
                                    <p>Client: @project.Client</p>
                                    <p>State: @project.StateProj</p>
                                    <p>Type: @project.TypeProj</p>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </tbody>
</table>
<style>
  .right-button {
    float: right;
  }
</style>

@code {
    private string searchedDirectory = "R:/test/test";
    private string fileFormat = "*.POrgConf.json";

    private List<string> uniqueLanguages { get; set; }
    private List<string> uniqueKeywords { get; set; }
    private List<string> uniqueColor { get; set; }
    private List<string> uniqueState { get; set; }
    private List<string> uniqueType { get; set; }

    //public List<string> jsonStrings = new List<string>();
    public List<Project> ProjectsOriginal { get; set; }
    public List<Project> Projects { get; set; } = new List<Project>();

    public class Project
    {
        public int Id { get; set; }
        public string Titre { get; set; }
        public string Description { get; set; }
        public string Auteur { get; set; }
        public string Responsable { get; set; }
        public string Date { get; set; }
        public string Language { get; set; }
        public string Keywords { get; set; }
        public string Color { get; set; }
        public string Client { get; set; }
        public string StateProj { get; set; }
        public string TypeProj { get; set; }
        public bool DetailsVisible { get; set; }
    }

    public class Filter
    {
        public string Language { get; set; }
        public string Keyword { get; set; }
        public string Color { get; set; }
        public string State { get; set; }
        public string Type { get; set; }
    }

    private Filter CurrentConditions { get; set; } = new Filter();

    private string selectedLanguage { get; set; } = " ";
    private string selectedKeyword { get; set; } = " ";
    private string selectedColor { get; set; } = " ";
    private string selectedState { get; set; } = " ";
    private string selectedType { get; set; } = " ";

    private void UpdateDB()
    {
        var dbManager = new DbManager();
        //va chercher tout les fichier ".POrgConf.jon" dans "R:/test/test" et ces sous dossiers avec le nom définit
        var files = Directory.GetFiles(searchedDirectory, fileFormat, SearchOption.AllDirectories);
        dbManager.InsertJsonFiles(files);
    }


    protected override async Task OnInitializedAsync()
    {

        //ajoute tout les fichiers json dans la liste de string
        Projects = LoadFilesFromDatabase();
        ProjectsOriginal = Projects;

        UpdateSelectOptions();
        CurrentConditions.Language = selectedLanguage;
        CurrentConditions.Keyword = selectedKeyword;
        CurrentConditions.Color = selectedColor;
        CurrentConditions.State = selectedState;
        CurrentConditions.Type = selectedType;
    }

    private List<Project> LoadFilesFromDatabase()
    {
        var dbManager = new DbManager();
        var jsonFiles = dbManager.GetFilesFromDatabase();
        return jsonFiles;
    }

    private void PopulateLanguages()
    {
        uniqueLanguages = Projects
        .Select(json => json.Language)
        .Where(language => !string.IsNullOrEmpty(language))
        .SelectMany(language => language.Split(';'))
        .Select(language => language.Trim())
        .Select(language => language.ToLower())
        .Distinct()
        .ToList();
    }
    private void PopulateKeywords()
    {
        uniqueKeywords = Projects
        .Select(json => json.Keywords)
        .Where(Keywords => !string.IsNullOrEmpty(Keywords))
        .SelectMany(Keywords => Keywords.Split(';'))
        .Select(Keywords => Keywords.Trim())
        .Select(Keywords => Keywords.ToLower())
        .Distinct()
        .ToList();
    }
    private void PopulateColors()
    {
        uniqueColor = Projects
        .Select(json => json.Color)
        .Where(Color => !string.IsNullOrEmpty(Color))
        .SelectMany(Color => Color.Split(';'))
        .Select(Color => Color.Trim())
        .Select(Color => Color.ToLower())
        .Distinct()
        .ToList();
    }
    private void PopulateStates()
    {
        uniqueState = Projects
        .Select(json => json.StateProj)
        .Where(StateProj => !string.IsNullOrEmpty(StateProj))
        .SelectMany(StateProj => StateProj.Split(';'))
        .Select(StateProj => StateProj.Trim())
        .Select(StateProj => StateProj.ToLower())
        .Distinct()
        .ToList();
    }
    private void PopulateTypes()
    {
        uniqueType = Projects
        .Select(json => json.TypeProj)
        .Where(TypeProj => !string.IsNullOrEmpty(TypeProj))
        .SelectMany(TypeProj => TypeProj.Split(';'))
        .Select(TypeProj => TypeProj.Trim())
        .Select(TypeProj => TypeProj.ToLower())
        .Distinct()
        .ToList();
    }

    private List<Project> ConvertStringListIntoProject(List<String> InputList)
    {

        List<Project> OutputList = new List<Project>();

        foreach (var item in InputList)
        {
            OutputList.Add(JsonConvert.DeserializeObject<Project>(item));
        }

        return OutputList;

    }

    private void LanguageSelected(ChangeEventArgs e)
    {
        selectedLanguage = e.Value.ToString();
        CurrentConditions.Language = selectedLanguage;
        SuperSort();
    }
    private void KeywordSelected(ChangeEventArgs e)
    {
        selectedKeyword = e.Value.ToString();
        CurrentConditions.Keyword = selectedKeyword;
        SuperSort();
    }
    private void ColorSelected(ChangeEventArgs e)
    {
        selectedColor = e.Value.ToString();
        CurrentConditions.Color = selectedColor;
        SuperSort();
    }
    private void TypeSelected(ChangeEventArgs e)
    {
        selectedType = e.Value.ToString();
        CurrentConditions.Type = selectedType;
        SuperSort();
    }
    private void StateSelected(ChangeEventArgs e)
    {
        selectedState = e.Value.ToString();
        CurrentConditions.State = selectedState;
        SuperSort();
    }

    private void SuperSort()
    {

        Projects = ProjectsOriginal;

        if (CurrentConditions.Language != " ")
        {
            Projects = Projects.Where(json =>
            {
                var project = json;
                if (project.Language == null) return false;
                var languages = project.Language.Split(";");
                return languages.Any(language => language.Trim().ToLower().Equals(CurrentConditions.Language.ToLower()));
            }).ToList();
        }

        if (CurrentConditions.Keyword != " ")
        {
            Projects = Projects.Where(json =>
            {
                var project = json;
                if (project.Keywords == null) return false;
                var keywords = project.Keywords.Split(";");
                return keywords.Any(keyword => keyword.Trim().ToLower().Equals(CurrentConditions.Keyword.ToLower()));
            }).ToList();
        }

        if (CurrentConditions.Color != " ")
        {
            Projects = Projects.Where(json =>
            {
                var project = json;
                if (project.Color == null) return false;
                var colors = project.Color.Split(";");
                return colors.Any(color => color.Trim().ToLower().Equals(CurrentConditions.Color.ToLower()));
            }).ToList();
        }

        if (CurrentConditions.State != " ")
        {
            Projects = Projects.Where(json =>
            {
                var project = json;
                if (project.StateProj == null) return false;
                var states = project.StateProj.Split(";");
                return states.Any(state => state.Trim().ToLower().Equals(CurrentConditions.State.ToLower()));
            }).ToList();
        }

        if (CurrentConditions.Type != " ")
        {
            Projects = Projects.Where(json =>
            {
                var project = json;
                if (project.TypeProj == null) return false;
                var types = project.TypeProj.Split(";");
                return types.Any(type => type.Trim().ToLower().Equals(CurrentConditions.Type.ToLower()));
            }).ToList();
        }

        UpdateSelectOptions();
        StateHasChanged();
    }

    private void ResetAll()
    {
        Projects = ProjectsOriginal;
        UpdateSelectOptions();
        ResetSortVisuals();
        StateHasChanged();
    }
    private void ResetSortVisuals()
    {
        selectedLanguage = " ";
        CurrentConditions.Language = " ";
        selectedKeyword = " ";
        CurrentConditions.Keyword = " ";
        selectedColor = " ";
        CurrentConditions.Color = " ";
        selectedState = " ";
        CurrentConditions.State = " ";
        selectedType = " ";
        CurrentConditions.Type = " ";
    }

    private void UpdateSelectOptions()
    {
        PopulateLanguages();
        PopulateKeywords();
        PopulateColors();
        PopulateStates();
        PopulateTypes();
    }

    private void ToggleDetails(int index)
    {
        //Déserialize le Json en objet de type classe(encore)
        var project = Projects[index];
        //toggle DetailsVisible
        project.DetailsVisible = !project.DetailsVisible;
        //Reserialize l'object Project en Json -> ne marche pas sans
        Projects[index] = project;
        StateHasChanged();
    }
}